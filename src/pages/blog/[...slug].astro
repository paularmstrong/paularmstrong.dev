---
import Picture from '~/components/Picture.astro';
import Aside from '~/components/Aside.astro';
import AuthorMeta from '~/components/AuthorMeta.astro';
import Base from '~/layouts/Base.astro';
import Link from '~/components/Link.astro';
import PageInfo from '~/components/PageInfo.astro';
import PageNav from '~/components/PageNav.astro';
import Prose from '~/components/Prose.astro';
import TocList from '~/components/TocList.astro';
import { Share, ShareLink } from '~/components/Share';

export async function getStaticPaths() {
	const posts = (await Astro.glob('../../../blog/*.mdx'))
		.map((post) => {
			const filename = `blog/${post.file.split('/blog/')[1]}`;
			const match = filename
				.replace(/\.mdx?$/, '')
				.match(/^blog\/(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})-(?<slug>.+)/);
			if (!match) {
				return null;
			}
			return { params: { slug: Object.values(match.groups!).join('/') }, props: { post: { ...post, filename } } };
		})
		.filter((post) => Boolean(post) && (import.meta.env.DEV || !post?.props?.post?.frontmatter?.draft))
		.sort(
			(a, b) =>
				new Date(a!.props.post.frontmatter.pubDate).valueOf() - new Date(b!.props.post.frontmatter.pubDate).valueOf()
		);
	for (let i = 0; i < posts.length; i++) {
		const prev = posts[i - 1];
		const next = posts[i + 1];
		Object.defineProperty(posts[i]!.props, 'siblings', {
			configurable: true,
			enumerable: true,
			writable: true,
			value: {
				prev: prev ? { ...prev.props.post.frontmatter, slug: `${prev.params.slug}/` } : undefined,
				next: next ? { ...next.props.post.frontmatter, slug: `${next.params.slug}/` } : undefined,
			},
		});
	}

	return posts;
}

const {
	filename,
	frontmatter: { draft, title, pubDate, updatedDate, readingTime, description, toc, heroImage, ogImage },
	getHeadings,
	Content,
} = Astro.props.post;
const { slug } = Astro.params;
const { siblings } = Astro.props;

interface Heading {
	text: string;
	slug: string;
	headings: Array<Heading>;
}

const headings: Array<Heading> = [];
const levels = [{ headings }];

for (const h of getHeadings()) {
	const depth = h.depth - 2;
	if (depth < 0 || depth > 1) {
		continue;
	}
	levels[depth]!.headings = levels[depth]?.headings || [];
	levels[depth]!.headings.push((levels[depth + 1] = h));
}
---

<Base title={title} description={description} image={ogImage?.src || heroImage?.src}>
	<article itemprop="blogPost" itemscope itemtype="http://schema.org/Article">
		<meta itemprop="mainEntityOfPage" content={`${slug}`} />
		<Prose>
			<h1 itemprop="name headline">
				{title}
				{draft ? <sup class="text-red-400">(draft)</sup> : null}
			</h1>

			<PageInfo file={filename} pubDate={pubDate} updatedDate={updatedDate} readingTime={readingTime} />

			{
				heroImage?.src ? (
					<div class="lg:bustout">
						<Picture
							src={heroImage.src}
							alt=""
							fetchPriority="high"
							loading="eager"
							widths={[480, 640, 1200, Math.max(heroImage.width, 1600)]}
							width={heroImage.width}
							height={heroImage.height}
							itemprop="image"
							class="!mt-0 w-full max-w-none"
						/>
					</div>
				) : null
			}

			<AuthorMeta />

			<div itemprop="articleBody">
				{
					toc ? (
						<aside class="prose-base mx-4 mb-4 rounded-xl bg-slate-200 px-4 py-1 text-slate-900 transition-colors duration-500 dark:bg-slate-800 sm:float-right sm:ml-8 sm:mr-0 sm:max-w-[50%] md:-mr-8 lg:-mr-32">
							<h2 class="!mt-4">Table of contents</h2>
							<TocList headings={headings} />
						</aside>
					) : null
				}

				<Content />
			</div>

			<hr />

			<Aside title="Share your thoughts">
				<div class="flex flex-col items-start gap-x-4 gap-y-0 sm:flex-row-reverse">
					<div class="mt-4 justify-self-center">
						<div class="w-28"><Share client:load title={title} url={`/blog/${slug}/`} /></div>
					</div>
					<p class="!mb-1 inline-flex shrink flex-wrap gap-x-1">
						Since youâ€™ve made it this far, hopefully you enjoyed reading! Please
						<ShareLink client:load title={title} url={`/blog/${slug}/`}>share</ShareLink>
						the post or <Link href="https://mstdn.io/@paularmstrong" target="_blank" rel="noopener noreferrer">
							ping me on Mastodon
						</Link>
					</p>
				</div>
			</Aside>
		</Prose>
	</article>

	<aside class="select-none">
		<Prose><h2 id="post-nav" class="!text-lg">More posts</h2></Prose>
		<PageNav next={siblings.next} prev={siblings.prev} />
	</aside>
</Base>
