---
import { Picture } from '@astrojs/image/components';
import AuthorMeta from '~/components/AuthorMeta.astro';
import Base from '~/layouts/Base.astro';
import PageInfo from '~/components/PageInfo.astro';
import PageNav from '~/components/PageNav.astro';
import Prose from '~/components/Prose.astro';
import TocList from '~/components/TocList.astro';

export async function getStaticPaths() {
	const posts = (await Astro.glob('../../../blog/*.{md,mdx}'))
		.map((post) => {
			const filename = `blog/${post.file.split('/blog/')[1]}`;
			const match = filename
				.replace(/\.mdx?$/, '')
				.match(/^blog\/(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})-(?<slug>.+)/);
			if (!match) {
				return false;
			}
			return { params: { slug: Object.values(match.groups).join('/') }, props: { post: { ...post, filename } } };
		})
		.sort((a, b) => new Date(a.props.post.frontmatter.pubDate) - new Date(b.props.post.frontmatter.pubDate))
		.filter((post) => Boolean(post) && (import.meta.env.DEV || !post?.props?.post?.frontmatter?.draft));

	for (let i = 0; i < posts.length; i++) {
		const prev = posts[i - 1];
		const next = posts[i + 1];
		posts[i].props.siblings = {
			prev: prev ? { ...prev.props.post.frontmatter, slug: prev.params.slug } : undefined,
			next: next ? { ...next.props.post.frontmatter, slug: next.params.slug } : undefined,
		};
	}

	return posts;
}

const {
	filename,
	frontmatter: { draft, title, pubDate, updatedDate, readingTime, description, toc, heroImage },
	getHeadings,
	Content,
} = Astro.props.post;
const { slug } = Astro.params;
const { siblings } = Astro.props;

const headings = [];
const levels = [{ headings }];

for (const h of getHeadings()) {
	const depth = h.depth - 2;
	if (depth < 0 || depth > 1) {
		continue;
	}
	levels[depth].headings = levels[depth]?.headings || [];
	levels[depth].headings.push((levels[depth + 1] = h));
}
---

<Base title={title} description={description} image={Array.isArray(heroImage?.src) ? heroImage.src[0] : heroImage?.src}>
	<article itemprop="blogPost" itemscope itemtype="http://schema.org/Article">
		<meta itemprop="mainEntityOfPage" content={slug} />
		<Prose>
			<h1 itemprop="name headline">
				{title}{
					draft ? (
						<>
							{' '}
							<sup class="text-red-400">(draft)</sup>
						</>
					) : null
				}
			</h1>

			<PageInfo file={filename} pubDate={pubDate} updatedDate={updatedDate} readingTime={readingTime} />

			{
				heroImage?.src ? (
					<div class="lg:bustout">
						<Picture
							src={heroImage.src}
							alt=""
							fetchpriority="high"
							loading="eager"
							widths={[480, 640, 1200, Math.max(heroImage.width, 1600)]}
							aspectRatio={heroImage.width / heroImage.height}
							width={heroImage.width}
							height={heroImage.height}
							itemprop="image"
							class="!mt-0 w-full max-w-none"
						/>
					</div>
				) : null
			}

			<AuthorMeta />

			<div itemprop="articleBody">
				{
					toc ? (
						<aside class="prose-base mx-4 mb-4 rounded-xl bg-slate-200 px-4 py-1 text-slate-900 dark:bg-slate-800 sm:float-right sm:ml-8 sm:mr-0 sm:max-w-[50%] md:-mr-8 lg:-mr-32">
							<h2 class="!mt-4">Table of contents</h2>
							<TocList headings={headings} />
						</aside>
					) : null
				}

				<Content />
			</div>
		</Prose>
	</article>

	<aside class="mt-10">
		<Prose><h2 id="post-nav" class="!text-lg">Post navigation</h2></Prose>
		<PageNav next={siblings.next} prev={siblings.prev} />
	</aside>
</Base>
