name: Pull request

on: pull_request

jobs:
  setup:
    runs-on: ubuntu-latest
    # This job is the originator for determining the list of tasks to be farmed out to a matrix.
    # This declares the output from the `tasks --list` step
    outputs:
      tasks: ${{ steps.tasks.outputs.tasks }}
    steps:
      - uses: actions/checkout@v3
        with:
          # Ensure you check out enough history to allow oneRepo to determine the
          # merge-base and changed files. `0` will pull all history and should be sufficiently
          # safe, unless your repo is gigabytes in size
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      - run: yarn

      # Determine the tasks for the given lifecycle and send them to the github output
      - uses: paularmstrong/onerepo/actions/get-tasks@main
        id: tasks # important!: this must match the ID used in the output
        with:
          cli: ./bin/dev.mjs
          lifecycle: pre-merge
          verbosity: 2

  tasks:
    runs-on: ubuntu-latest
    needs: setup
    # A conditional here prevents the job from failing unexpectedly in the rare case
    # that there are no tasks to run at all.
    if: ${{ fromJSON(needs.setup.outputs.tasks).parallel != '[]' && fromJSON(needs.setup.outputs.tasks).parallel != '[]' }}
    strategy:
      # Run all tasks, even if some fail
      fail-fast: false
      matrix:
        # Because we run all tasks on separate runners, we do not need to worry about
        # which tasks are parallel or serial â€“ they can all be parallel
        task:
          - ${{ fromJSON(needs.setup.outputs.tasks).parallel }}
          - ${{ fromJSON(needs.setup.outputs.tasks).serial }}
    name: ${{ join(matrix.task.*.name, ', ') }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      - run: yarn

      - uses: paularmstrong/onerepo/actions/run-task@main
        with:
          task: |
            ${{ toJSON(matrix.task) }}
